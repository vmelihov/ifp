jQuery(function(n){var i=function(a,s){var t=s.closest(".js-form");a?(s.removeClass("error"),s.hasClass("checked")||(s.addClass("checked"),t.data("ok",t.data("ok")+1))):(s.addClass("error"),s.hasClass("checked")&&(s.removeClass("checked"),t.data("ok",t.data("ok")-1))),t.data("ok")==t.data("validate")?t.find(".js-submit").removeAttr("disabled"):t.find(".js-submit").attr("disabled","disabled")};n(".js-form").attr("data-ok",0),n(".js-mailValidation").focusout(function(){var a,s=n(this),t=s.parents(".js-validateblock");i((a=s.val(),/^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(a)),t)}),n(".js-textValidation").focusout(function(){var a,s=n(this),t=s.parents(".js-validateblock");a=""!=s.val(),i(a,t)});var s=function(a){var s=a.parents(".js-validateblock"),t=a.parents(".js-passBlock");t.find(".js-passValidation1").val()==t.find(".js-passValidation2").val()?""==a.val()?i(!1,s):(i(!0,s),i(!0,t.find(".js-passValidation2").parents(".js-validateblock"))):""==a.val()?i(!1,s):(i(!0,s),i(!1,t.find(".js-passValidation2").parents(".js-validateblock")))};n(".js-passValidation").change(function(){s(n(this))}),n(".js-checkValidation").change(function(){var a=n(this),s=a.parents(".js-form");a.prop("checked")?s.data("ok",s.data("ok")-1):s.data("ok",s.data("ok")+1),s.data("ok")==s.data("validate")?s.find(".js-submit").removeAttr("disabled"):s.find(".js-submit").attr("disabled","disabled")}),n(".js-passInput").change(function(){var a=n(this);a.parents(".js-passParent").find(".js-notPassInput").focus().val(a.val())}),n(".js-notPassInput").change(function(){var a=n(this);_pass=a.parents(".js-passParent").find(".js-passInput"),_pass.focus().val(a.val()),s(_pass)}),n(".js-passEye").on("click",function(){var a=n(this);a.parents(".js-passParent").find(".js-passLine").removeClass("d-none"),a.parents(".js-passLine").addClass("d-none")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
